import re
import sys
import os
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, ListFlowable, ListItem


def create_pdf(report_text):
    import markdown2
    import pdfkit
    output_file = os.path.join(os.getcwd(), "Report", "report.pdf")
    html_content = markdown2.markdown(report_text)
    options = {
        'page-size': 'A4',
        'margin-top': '0.75in',
        'margin-right': '0.75in',
        'margin-bottom': '0.75in',
        'margin-left': '0.75in',
    }
    # print(html_content)
    # Convert HTML to PDF
    pdfkit.from_string(html_content, output_file, options=options)


def create_html(report_text):
    html = ''
    or_list = "^[1-9]+\.\s"
    un_list = '^\- '
    order_list = False
    unordered_list = False
    paragraphs = report_text.split("\n")
    paragraphs = [p for p in paragraphs if p]
    for paragraph in paragraphs:
        if paragraph.startswith('**'):
            html = html + '<h2>' + paragraph.strip('**') + '</h2>'
            if unordered_list:
                unordered_list = False
                html += "</ul>"
            if order_list:
                order_list = False
                html += '</ol>'

        elif re.match(or_list, paragraph):
            paragraph = paragraph.replace('**', '')
            paragraph = re.sub(or_list, "", paragraph)
            if unordered_list:
                unordered_list = False
                html += '</ul>'
            if not order_list:
                html += '<ol><li>' + paragraph + '</li>'
                order_list = True
            else:
                html += '<li>' + paragraph + '</li>'

        elif re.match(un_list, paragraph):
            paragraph = re.sub(un_list, '', paragraph)
            if not unordered_list:
                html += '<ul><li>' + paragraph + '</li>'
                unordered_list = True
            else:
                html += '<li>' + paragraph + '</li>'
        else:
            if unordered_list:
                unordered_list = False
                html += '</ul>'
            if order_list:
                order_list = False
                html += '</ol>'

            html += paragraph
    return html


def create_pdf(report_text, output_file_name):
    if not os.path.exists(os.path.join(os.getcwd(), "Report")):
        os.mkdir(os.path.join(os.getcwd(), "Report"))

    output_file = os.path.join(os.getcwd(), "Report", f"{output_file_name}.pdf")
    doc = SimpleDocTemplate(output_file, pagesize=letter, title='', subject='')
    styles = getSampleStyleSheet()

    flowables = []

    pattern = "^[1-9]+\."

    paragraphs = report_text.split('\n')
    for paragraph in paragraphs:
        if paragraph.startswith('**') or paragraph.startswith('##'):
            paragraph = paragraph.strip('## ')
            p = Paragraph(paragraph.strip('**'), styles['Heading1'])
        elif re.match(pattern, paragraph):
            p = Paragraph(paragraph.replace('**', ''), styles['Normal'])
        else:
            p = Paragraph(paragraph, styles['Normal'])
        flowables.append(p)
    doc.build(flowables)
    return f"{output_file_name}.pdf"


def create_html_styled(text):
    import markdown2
    # Markdown content
    markdown_text = "## This is a heading\nThis is some *markdown* text."
    # Convert Markdown to HTML
    html_content = markdown2.markdown(text)
    # Wrap HTML content with style to fix font sizes
    styled_html = """ 
    <!DOCTYPE html> 
    <html lang="en"> 
    <head>     
    <meta charset="UTF-8">    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">     
    <title>Markdown to HTML</title>     
    <style>         
        body 
        { 
            {
                font-size: 16px;
            }
        }
        h1 
        {
            {
                font-size: 24px;
            }
        }         
        h2
        { 
           {
               font-size: 20px; 
           }
        }         
        p 
        { 
            {
                font-size: 16px;
            }
        }              
        </style> 
        </head>""" + f'<body>{html_content}</body> </html>'  # Write the styled HTML content to a file or do further processing
    with open("simple_html_output.html", "w") as file:
        file.write(html_content)


if __name__ == '__main__':
    # txt = sys.stdin
    # txt = txt.read()
    txt = '''**Introduction**\n\nThis comprehensive Collaboration and Comments Report aims to analyze and summarize the key findings, collaborative efforts, and feedback received for a series of alerts generated by the security monitoring system. The report encompasses a thorough examination of the alerts, highlighting significant observations, actions taken, and areas for improvement.\n\n**Collaborative Efforts**\n\n1. **Alert 1: Malicious IOCs Detected on Endpoint**\n\n- Collaboration: The security team promptly initiated a collaborative investigation involving the endpoint security team, network security team, and threat intelligence team.\n- Actions: The endpoint was isolated to prevent lateral movement, and a comprehensive threat hunting exercise was conducted across the network to identify potential indicators of compromise (IOCs).\n- Feedback: The threat intelligence team provided valuable insights into the nature of the IOCs, enabling the team to refine their search criteria and identify additional compromised assets.\n\n2. **Alert 2: Suspicious Network Activity Detected**\n\n- Collaboration: The network security team collaborated with the system administration team to analyze firewall logs and network traffic patterns.\n- Actions: A deeper packet inspection was performed to identify the source of the suspicious activity, and additional security measures were implemented to mitigate potential threats.\n- Feedback: The system administration team provided access to additional network logs, which aided in pinpointing the origin of the suspicious traffic.\n\n3. **Alert 3: Phishing Email Campaign Detected**\n\n- Collaboration: The security awareness team collaborated with the IT department to launch a targeted phishing awareness campaign for employees.\n- Actions: Simulated phishing emails were sent to employees to assess their susceptibility to such attacks, and educational sessions were conducted to reinforce best practices for identifying and reporting phishing attempts.\n- Feedback: The IT department provided user-level data, which helped tailor the phishing awareness campaign to address specific vulnerabilities within the organization.\n\n**Comments and Feedback: Summary**\n\nThe alerts generated by the security monitoring system prompted a series of collaborative efforts and feedback loops among various teams within the organization. Here's a summary of the key comments and feedback received:\n\n- The endpoint security team suggested implementing additional endpoint detection and response (EDR) measures to enhance real-time threat detection and response capabilities.\n- The network security team recommended conducting regular vulnerability assessments and penetration testing to identify and address network security gaps.\n- The threat intelligence team emphasized the need for continuous threat intelligence sharing and collaboration with external sources to stay updated on emerging threats.\n- The system administration team highlighted the importance of maintaining up-to-date software and security patches to minimize vulnerabilities.\n- The security awareness team proposed incorporating interactive training modules and simulations to enhance employee awareness of potential security risks.\n\n**Conclusion**\n\nThe collaborative efforts undertaken in response to the alerts resulted in a comprehensive understanding of the security incidents, leading to the implementation of effective mitigation strategies. The feedback received from various teams has been instrumental in identifying areas for improvement and refining the organization's overall security posture. By fostering a culture of collaboration and continuous feedback, the organization is well-positioned to proactively address future security challenges and maintain a robust security posture.'''
    # html = create_html(txt)
    # create_pdf(txt, 'sample-file')
    create_html_styled(txt)
